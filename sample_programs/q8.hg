int n, i, j, k, n1, n2, arr[100000], L[10000], R[10000];
void merge(int l, int r, int m){
    n1 = m - l + 1; 
    n2 =  r - m; 

    for (i = 0; i < n1; i=i+1) {
        L[i] = arr[l + i]; 
    };
    for (j = 0; j < n2; j=j+1) {
        R[j] = arr[m + 1+ j]; 
    };
        
    i = 0; // Initial index of first subarray 
    j = 0; // Initial index of second subarray 
    k = l; // Initial index of merged subarray 
    while (i < n1 && j < n2){ 
        if (L[i] <= R[j]) 
        { 
            arr[k] = L[i]; 
            i=i+1; 
        } 
        else
        { 
            arr[k] = R[j]; 
            j=j+1; 
        };
        k=k+1; 
    }; 
    while (i < n1) 
    { 
        arr[k] = L[i]; 
        i=i+1; 
        k=k+1; 
    };
    while (j < n2) 
    { 
        arr[k] = R[j]; 
        j=j+1; 
        k=k+1; 
    };
}
void mergeSort(int l, int r)  
{  
    if(l < r){
        int m = (l + r - 1) / 2;
        mergeSort(l, mid);
        mergeSort(mid + 1, r);
        merge(l, m, r);
    };
}  

void printArray(int n)  
{  
    int i;  
    for (i = 0; i < n; i=i+1)
    {
        cout << arr[i];
        cout << " ";
    };
    cout << "\n"; 
}
void main(){  
    cin >> n;
    i = 0;
    for (i = 0; i < n; i=i+1)
    {
        cin >> arr[i];
    };

    insertionSort(arr, n);
    printArray(arr, n); 
}
